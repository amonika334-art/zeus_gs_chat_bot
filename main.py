# main.py ‚Äî user's bot logic wrapped for Render Web Service (Free)
import os
import asyncio
import logging
import time
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from aiohttp import web, ClientSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# load_dotenv()
# load_dotenv(dotenv_path="env/config")
TOKEN = "7730139842:AAF8mnKPvwL2I0LYGtFABBBjFZoxx4D77RY"
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –π–æ–≥–æ –≤ Environment –Ω–∞ Render –∞–±–æ —É .env/env –ª–æ–∫–∞–ª—å–Ω–æ.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
start_time = time.time()
message_count = 0
error_count = 0

def get_uptime():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    uptime = time.time() - start_time
    hours = int(uptime // 3600)
    minutes = int((uptime % 3600) // 60)
    seconds = int(uptime % 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    return {
        "uptime": get_uptime(),
        "messages_processed": message_count,
        "errors": error_count,
        "timestamp": datetime.now().isoformat()
    }

allowed_users_per_topic: dict[int, list[str]] = {}
auto_delete_settings: dict[int, int] = {}
topic_cleanup_settings: dict[int, dict] = {}  # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–º
topic_aliases: dict[int, int] = {
    1: 832,  # –∞–ª–∏–∞—Å 1 -> —Ç–µ–º–∞ 832
    2: 832   # –∞–ª–∏–∞—Å 2 -> —Ç–µ–º–∞ 832 (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID)
}  # –∞–ª–∏–∞—Å—ã: –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä -> ID —Ç–µ–º—ã
forwarded_messages: dict[str, set[int]] = {}  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: message_id -> set of topic_ids

def _get_topic_id_from_context(update: Update, args: list[str]) -> int | None:
    if args:
        try:
            return int(args[-1])
        except ValueError:
            pass
    if update.message and update.message.is_topic_message:
        return update.message.message_thread_id
    return None

async def _is_chat_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if not update.message:
        return False
    chat = update.message.chat
    user = update.message.from_user
    try:
        member = await context.bot.get_chat_member(chat.id, user.id)
        return member.status in ("administrator", "creator")
    except Exception:
        return False

def require_admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await _is_chat_admin(update, context):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
        return await func(update, context)
    return wrapper

def _norm_username(u: str | None) -> str:
    return (u or "").lstrip("@").lower().strip()

def _resolve_topic_id(topic_input: str | int) -> int | None:
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç –∞–ª–∏–∞—Å —Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω—ã–π ID —Ç–µ–º—ã"""
    try:
        topic_num = int(topic_input)
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª–∏–∞—Å (–∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID —Ç–µ–º—ã
        if topic_num in topic_aliases:
            return topic_aliases[topic_num]
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Ä–µ–∞–ª—å–Ω—ã–π ID —Ç–µ–º—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return topic_num
    except ValueError:
        return None

@require_admin
async def allow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /allow @username [topic_id]. –ú–æ–∂–Ω–∞ –±–µ–∑ topic_id, —è–∫—â–æ –≤–≤–æ–¥–∏—à —É –≥—ñ–ª—Ü—ñ.")
    username = _norm_username(context.args[0])
    if not username:
        return await update.message.reply_text("‚õî –í–∫–∞–∂–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π @username.")
    topic_id = _get_topic_id_from_context(update, context.args[1:])
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")

    users = allowed_users_per_topic.setdefault(topic_id, [])
    if username not in users:
        users.append(username)
        await update.message.reply_text(f"‚úÖ @{username} –º–æ–ª–æ–¥–µ—Ü—å, —Ç–∏ –¥–∑–µ –±–µ—Å—Ç, —Ç—ñ–ª—å–∫–∏ –Ω—ñ—è–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 18+ {topic_id}")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è @{username} –∞–π –¥–∞ –º–æ–ª–æ–¥–µ—Ü—å, —è–∫ —É —Ç–∞–∫—ñ–π –±—É—Å—ñ –º–æ–Ω–∞ –¥–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞—Ç–∏ {topic_id}")

@require_admin
async def deny(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /deny @username [topic_id]. –ú–æ–∂–Ω–∞ –±–µ–∑ topic_id, —è–∫—â–æ –≤–≤–æ–¥–∏—à —É –≥—ñ–ª—Ü—ñ.")
    username = _norm_username(context.args[0])
    if not username:
        return await update.message.reply_text("‚õî –í–∫–∞–∂–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π @username.")
    topic_id = _get_topic_id_from_context(update, context.args[1:])
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")

    users = allowed_users_per_topic.setdefault(topic_id, [])
    if username in users:
        users.remove(username)
        await update.message.reply_text(f"üö´ @{username} –Ω—î –Ω—î, —Ç–æ–±—ñ —Å—é–¥–∏ –Ω–µ –º–æ–Ω–∞ –ø–∏—Å–∞—Ç–∏ {topic_id}")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è @{username} –∞–π—è–π, –Ω–µ –º–æ–Ω–∞, –∑–Ω–∞—á–∏—Ç –Ω–µ –º–æ–Ω–∞ {topic_id}")

@require_admin
async def set_autodelete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_autodelete <—Å–µ–∫—É–Ω–¥–∏> [topic_id]")
    try:
        seconds = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚õî <—Å–µ–∫—É–Ω–¥–∏> –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    topic_id = _get_topic_id_from_context(update, context.args[1:])
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")

    auto_delete_settings[topic_id] = max(0, seconds)
    if seconds > 0:
        await update.message.reply_text(f"‚ôªÔ∏è –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}: {seconds} —Å–µ–∫.")
    else:
        await update.message.reply_text(f"‚ôªÔ∏è –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}.")

@require_admin
async def list_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not allowed_users_per_topic and not auto_delete_settings:
        return await update.message.reply_text("üì≠ –ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–æ—Å—Ç—É–ø—ñ–≤ –∞–±–æ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è.")
    lines = ["üìå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"]
    topic_ids = sorted(set(allowed_users_per_topic.keys()) | set(auto_delete_settings.keys()))
    for tid in topic_ids:
        users = allowed_users_per_topic.get(tid, None)
        clean = auto_delete_settings.get(tid, 0)
        if users is None:
            users_str = "(–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç—å—Å—è)"
        else:
            users_str = ", ".join(f"@{u}" for u in users) if users else "‚Äî (–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤—Å—ñ–º)"
        lines.append(f"‚Äî –ì—ñ–ª–∫–∞ {tid}: –¥–æ—Å—Ç—É–ø: {users_str}; –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è: {clean}s")
    await update.message.reply_text("\n".join(lines))

@require_admin
async def deny_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–µ—Ç–∫–µ"""
    topic_id = _get_topic_id_from_context(update, context.args)
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –∑–Ω–∞—á–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—Å–µ–º
    allowed_users_per_topic[topic_id] = []
    await update.message.reply_text(f"üö´ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ –≥—ñ–ª—Ü—ñ {topic_id}")

@require_admin
async def allow_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–µ—Ç–∫–µ"""
    topic_id = _get_topic_id_from_context(update, context.args)
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–µ—Ç–∫–µ - –∑–Ω–∞—á–∏—Ç –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –≤—Å–µ–º
    if topic_id in allowed_users_per_topic:
        del allowed_users_per_topic[topic_id]
        await update.message.reply_text(f"‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ –≥—ñ–ª—Ü—ñ {topic_id}")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –ì—ñ–ª–∫–∞ {topic_id} –Ω–µ –º–∞—î –æ–±–º–µ–∂–µ–Ω—å –¥–æ—Å—Ç—É–ø—É")

@require_admin
async def toggle_restricted_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤–µ—Ç–∫–∏"""
    topic_id = _get_topic_id_from_context(update, context.args)
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")
    if topic_id in allowed_users_per_topic:
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω - –≤—ã–∫–ª—é—á–∞–µ–º (—É–¥–∞–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
        del allowed_users_per_topic[topic_id]
        await update.message.reply_text(f"üîì –†–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}. –í—Å—ñ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏.")
    else:
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω - –≤–∫–ª—é—á–∞–µ–º (–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ—Ö)
        allowed_users_per_topic[topic_id] = []
        await update.message.reply_text(f"üîí –†–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}. –¢—ñ–ª—å–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏.")

@require_admin
async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–π —Ç–µ–º—ã –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    global message_count, error_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏)
    if update.message.reply_to_message:
        # –≠—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not context.args or len(context.args) < 1:
            return await update.message.reply_text(
                "üìù –§–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: /r <topic_id/–∞–ª–∏–∞—Å> [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_—Ç–µ–∫—Å—Ç]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /r 1 (–ø–µ—Ä–µ—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É —Å –∞–ª–∏–∞—Å–æ–º 1)\n"
                "–ü—Ä–∏–º–µ—Ä: /r 832 –î–æ–±–∞–≤–ª—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–µ—Ä–µ—à–ª–µ—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)"
            )
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ª–∏–∞—Å —Ç–µ–º—ã
        target_topic_id = _resolve_topic_id(context.args[0])
        if target_topic_id is None:
            return await update.message.reply_text("‚ùå ID —Ç–µ–º—ã –∏–ª–∏ –∞–ª–∏–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        additional_text = " ".join(context.args[1:]) if len(context.args) > 1 else ""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            original_message = update.message.reply_to_message
            current_topic_id = update.message.message_thread_id
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = f"{original_message.chat_id}_{original_message.message_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –∏–∑ –∞–ª–∏–∞—Å–æ–≤
            all_topics = set(topic_aliases.values())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —ç—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É
            if message_id in forwarded_messages:
                forwarded_topics = forwarded_messages[message_id]
                if target_topic_id in forwarded_topics:
                    await update.message.delete()
                    return await context.bot.send_message(
                        chat_id=update.message.chat.id,
                        text=f"‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —Ç–µ–º—É {target_topic_id}!",
                        message_thread_id=current_topic_id
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_id not in forwarded_messages:
                forwarded_messages[message_id] = set()
            forwarded_messages[message_id].add(target_topic_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            sender_name = update.message.from_user.first_name
            sender_username = update.message.from_user.username
            sender_info = f"@{sender_username}" if sender_username else sender_name
            
            forward_text = f"üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç {sender_info}"
            if additional_text:
                forward_text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {additional_text}"
            forward_text += "\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if original_message.text:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                text_content = original_message.text.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
                forward_text += text_content
            elif original_message.caption:
                caption_content = original_message.caption.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
                forward_text += caption_content
            else:
                forward_text += "üìé [–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ]"
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ü–µ–ª–µ–≤—É—é —Ç–µ–º—É
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª
                if original_message.photo or original_message.video or original_message.document or original_message.audio or original_message.voice:
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª
                    await context.bot.forward_message(
                        chat_id=update.message.chat.id,
                        from_chat_id=update.message.chat.id,
                        message_id=original_message.message_id,
                        message_thread_id=target_topic_id
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                    if forward_text.strip():
                        await context.bot.send_message(
                            chat_id=update.message.chat.id,
                            text=forward_text,
                            message_thread_id=target_topic_id
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await context.bot.send_message(
                        chat_id=update.message.chat.id,
                        text=forward_text,
                        message_thread_id=target_topic_id
                    )
                
                logger.info(f"üì§ Admin {user_info} forwarded message from topic {current_topic_id} to topic {target_topic_id}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                await update.message.delete()
                logger.info(f"üóëÔ∏è Command message deleted successfully")
                
                # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram API
                # –ë–æ—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
                logger.info(f"‚ÑπÔ∏è Original message left in place (Telegram API limitation)")
                        
            except Exception as send_error:
                logger.error(f"‚ùå Error sending to topic {target_topic_id}: {send_error}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
                await context.bot.send_message(
                    chat_id=update.message.chat.id,
                    text=f"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ {target_topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!",
                    message_thread_id=current_topic_id
                )
                return
            
        except Exception as e:
            error_count += 1
            logger.error(f"‚ùå Error forwarding message to topic {target_topic_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç, –∞ –Ω–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç
            try:
                await context.bot.send_message(
                    chat_id=update.message.chat.id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ —Ç–µ–º—É {target_topic_id}:\n{str(e)}",
                    message_thread_id=update.message.message_thread_id
                )
            except:
                pass  # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not context.args or len(context.args) < 2:
            return await update.message.reply_text(
                "üìù –§–æ—Ä–º–∞—Ç: /r <topic_id/–∞–ª–∏–∞—Å> <—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /r 1 –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ç–≤–µ—Ç –∏–∑ –¥—Ä—É–≥–æ–π —Ç–µ–º—ã.\n"
                "–ü—Ä–∏–º–µ—Ä: /r 832 –ö–∞–∫ –¥–µ–ª–∞?\n\n"
                "üí° –î–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /r <topic_id/–∞–ª–∏–∞—Å>"
            )
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ª–∏–∞—Å —Ç–µ–º—ã
        topic_id = _resolve_topic_id(context.args[0])
        if topic_id is None:
            return await update.message.reply_text("‚ùå ID —Ç–µ–º—ã –∏–ª–∏ –∞–ª–∏–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ topic_id)
        reply_text = " ".join(context.args[1:])
        
        if not reply_text.strip():
            return await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞!")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É
            chat_id = update.message.chat.id
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender_name = update.message.from_user.first_name
            sender_username = update.message.from_user.username
            sender_info = f"@{sender_username}" if sender_username else sender_name
            
            formatted_reply = f"üí¨ **–û—Ç–≤–µ—Ç –æ—Ç {sender_info}:**\n\n{reply_text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É
            sent_message = await context.bot.send_message(
                chat_id=chat_id,
                text=formatted_reply,
                message_thread_id=topic_id,
                parse_mode='Markdown'
            )
            
            logger.info(f"‚úÖ Admin {user_info} sent reply to topic {topic_id}: {reply_text[:50]}...")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–º—É {topic_id}!\n\n"
                f"üìù –¢–µ–∫—Å—Ç: {reply_text[:100]}{'...' if len(reply_text) > 100 else ''}"
            )
            
        except Exception as e:
            error_count += 1
            logger.error(f"‚ùå Error sending reply to topic {topic_id}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–º—É {topic_id}:\n{str(e)}"
            )

@require_admin
async def set_alias(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–∏–∞—Å –¥–ª—è —Ç–µ–º—ã"""
    if not context.args or len(context.args) < 2:
        return await update.message.reply_text(
            "üìù –§–æ—Ä–º–∞—Ç: /set_alias <–∫–æ—Ä–æ—Ç–∫–∏–π_–Ω–æ–º–µ—Ä> <topic_id>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /set_alias 1 832\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /r 1 –≤–º–µ—Å—Ç–æ /r 832"
        )
    
    try:
        alias_num = int(context.args[0])
        topic_id = int(context.args[1])
    except ValueError:
        return await update.message.reply_text("‚ùå –ò –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä, –∏ ID —Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
    
    if alias_num <= 0:
        return await update.message.reply_text("‚ùå –ö–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–ª–∏–∞—Å
    if alias_num in topic_aliases:
        old_topic_id = topic_aliases[alias_num]
        topic_aliases[alias_num] = topic_id
        await update.message.reply_text(
            f"‚úÖ –ê–ª–∏–∞—Å {alias_num} –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ë—ã–ª–æ: {alias_num} ‚Üí {old_topic_id}\n"
            f"–°—Ç–∞–ª–æ: {alias_num} ‚Üí {topic_id}"
        )
    else:
        topic_aliases[alias_num] = topic_id
        await update.message.reply_text(f"‚úÖ –ê–ª–∏–∞—Å {alias_num} ‚Üí {topic_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    logger.info(f"üìå Admin set alias {alias_num} ‚Üí {topic_id}")

@require_admin
async def remove_alias(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å —Ç–µ–º—ã"""
    if not context.args:
        return await update.message.reply_text("üìù –§–æ—Ä–º–∞—Ç: /remove_alias <–∫–æ—Ä–æ—Ç–∫–∏–π_–Ω–æ–º–µ—Ä>")
    
    try:
        alias_num = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå –ö–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    if alias_num in topic_aliases:
        topic_id = topic_aliases[alias_num]
        del topic_aliases[alias_num]
        await update.message.reply_text(f"üóëÔ∏è –ê–ª–∏–∞—Å {alias_num} ‚Üí {topic_id} —É–¥–∞–ª–µ–Ω!")
        logger.info(f"üóëÔ∏è Admin removed alias {alias_num} ‚Üí {topic_id}")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –ê–ª–∏–∞—Å {alias_num} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@require_admin
async def list_aliases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–ª–∏–∞—Å—ã —Ç–µ–º"""
    if not topic_aliases:
        return await update.message.reply_text("üì≠ –ê–ª–∏–∞—Å—ã —Ç–µ–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    
    lines = ["üìå –ê–ª–∏–∞—Å—ã —Ç–µ–º:"]
    for alias_num in sorted(topic_aliases.keys()):
        topic_id = topic_aliases[alias_num]
        lines.append(f"‚Ä¢ {alias_num} ‚Üí {topic_id}")
    
    await update.message.reply_text("\n".join(lines))

@require_admin
async def set_cleanup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ç–µ–º—ã"""
    if not context.args or len(context.args) < 2:
        return await update.message.reply_text(
            "üìù –§–æ—Ä–º–∞—Ç: /set_cleanup <topic_id/–∞–ª–∏–∞—Å> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_–≤_–º–∏–Ω—É—Ç–∞—Ö>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /set_cleanup 832 60 - –æ—á–∏—â–∞—Ç—å —Ç–µ–º—É 832 –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ /set_cleanup 1 30 - –æ—á–∏—â–∞—Ç—å —Ç–µ–º—É —Å –∞–ª–∏–∞—Å–æ–º 1 –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ /set_cleanup 832 0 - –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ç–µ–º—ã 832"
        )
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ª–∏–∞—Å —Ç–µ–º—ã
    topic_id = _resolve_topic_id(context.args[0])
    if topic_id is None:
        return await update.message.reply_text("‚ùå ID —Ç–µ–º—ã –∏–ª–∏ –∞–ª–∏–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    try:
        interval_minutes = int(context.args[1])
    except ValueError:
        return await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    if interval_minutes < 0:
        return await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!")
    
    if interval_minutes == 0:
        # –û—Ç–∫–ª—é—á–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        if topic_id in topic_cleanup_settings:
            del topic_cleanup_settings[topic_id]
            await update.message.reply_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–º—ã {topic_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–µ–º—ã {topic_id} —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
    else:
        # –í–∫–ª—é—á–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É
        topic_cleanup_settings[topic_id] = {
            "interval_minutes": interval_minutes,
            "last_cleanup": time.time()
        }
        await update.message.reply_text(
            f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–º—ã {topic_id} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç"
        )
    
    logger.info(f"üßπ Admin set cleanup for topic {topic_id}: {interval_minutes} minutes")



@require_admin
async def cleanup_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–º—É"""
    if not context.args:
        return await update.message.reply_text("üìù –§–æ—Ä–º–∞—Ç: /cleanup_now <topic_id/–∞–ª–∏–∞—Å>")
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–ª–∏–∞—Å —Ç–µ–º—ã
    topic_id = _resolve_topic_id(context.args[0])
    if topic_id is None:
        return await update.message.reply_text("‚ùå ID —Ç–µ–º—ã –∏–ª–∏ –∞–ª–∏–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    try:
        chat_id = update.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        messages_deleted = 0
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_chat_history –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in context.bot.get_chat_history(chat_id, limit=100):
                if hasattr(message, 'message_thread_id') and message.message_thread_id == topic_id:
                    try:
                        await context.bot.delete_message(chat_id=chat_id, message_id=message.message_id)
                        messages_deleted += 1
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                    except Exception as e:
                        logger.warning(f"Could not delete message {message.message_id}: {e}")
                        continue
        except Exception as e:
            logger.error(f"Error getting chat history: {e}")
        
        await update.message.reply_text(
            f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–º—ã {topic_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_deleted}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏
        if topic_id in topic_cleanup_settings:
            topic_cleanup_settings[topic_id]["last_cleanup"] = time.time()
        
        logger.info(f"üßπ Admin manually cleaned topic {topic_id}: {messages_deleted} messages")
        
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå Error cleaning topic {topic_id}: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ–º—ã {topic_id}: {str(e)}")

@require_admin
async def clear_forwarded(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global forwarded_messages
    forwarded_messages.clear()
    await update.message.reply_text("üßπ –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω!")
    logger.info(f"üßπ Admin cleared forwarded messages list")

@require_admin
async def show_forwarded(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not forwarded_messages:
        return await update.message.reply_text("üì≠ –ù–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:"]
    for message_id, topics in forwarded_messages.items():
        lines.append(f"‚Ä¢ {message_id}: {len(topics)} —Ç–µ–º")
    
    await update.message.reply_text("\n".join(lines))

@require_admin
async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã –≤ —á–∞—Ç–µ"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    try:
        chat_id = update.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await context.bot.get_chat(chat_id)
        
        if not chat.is_forum:
            return await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º! –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä—É–º–∞—Ö —Å —Ç–µ–º–∞–º–∏.")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_forum_topic_icon_stickers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–∞—Ö
            # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Telegram API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
            # –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            await update.message.reply_text(
                "üìã **–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID —Ç–µ–º—ã:**\n\n"
                "1Ô∏è‚É£ **–í —Ç–µ–º–µ:** ID —Ç–µ–º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ\n"
                "2Ô∏è‚É£ **–ò–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:** ID —Ç–µ–º—ã = message_thread_id\n"
                "3Ô∏è‚É£ **–ö–æ–º–∞–Ω–¥–∞ /r:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —Ç–µ–º—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞\n\n"
                "üí° **–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
                "`/r 123 –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ç–≤–µ—Ç –∏–∑ –¥—Ä—É–≥–æ–π —Ç–µ–º—ã.`\n\n"
                "üîç **–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID —Ç–µ–º—ã:**\n"
                "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º—É\n"
                "‚Ä¢ ID –±—É–¥–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ URL\n"
                "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–º—ã"
            )
            
            logger.info(f"üìã Admin {user_info} requested topics list")
            
        except Exception as e:
            logger.error(f"‚ùå Error getting topics: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º.")
            
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå Error in list_topics: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    logger.info(f"üîî Received /start command from user {user_info}")
    
    try:
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):\n"
            "‚Ä¢ /allow @username [topic_id] - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            "‚Ä¢ /deny @username [topic_id] - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            "‚Ä¢ /deny_all [topic_id] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ /allow_all [topic_id] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ /toggle_restricted [topic_id] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
            "‚Ä¢ /set_autodelete <—Å–µ–∫—É–Ω–¥—ã> [topic_id] - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ /set_alias <–Ω–æ–º–µ—Ä> <topic_id> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–∏–∞—Å –¥–ª—è —Ç–µ–º—ã\n"
            "‚Ä¢ /remove_alias <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å —Ç–µ–º—ã\n"
            "‚Ä¢ /aliases - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–ª–∏–∞—Å—ã —Ç–µ–º\n"
            "‚Ä¢ /set_cleanup <topic_id/–∞–ª–∏–∞—Å> <–º–∏–Ω—É—Ç—ã> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ç–µ–º—ã\n"
            "‚Ä¢ /cleanup_now <topic_id/–∞–ª–∏–∞—Å> - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–º—É\n"
            "‚Ä¢ /clear_forwarded - –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ /show_forwarded - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ /topics - –∫–∞–∫ —É–∑–Ω–∞—Ç—å ID —Ç–µ–º\n"
            "‚Ä¢ /r <topic_id/–∞–ª–∏–∞—Å> <—Ç–µ–∫—Å—Ç> - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–π —Ç–µ–º—ã\n"
            "‚Ä¢ /r <topic_id/–∞–ª–∏–∞—Å> (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) - –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥—É—é —Ç–µ–º—É\n\n"
            "‚ÑπÔ∏è –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã: –µ—Å–ª–∏ –¥–ª—è –≤–µ—Ç–∫–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–æ–≤ ‚Äî –ø–∏—Å–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞. "
            "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤—Å–µ–º.\n\n"
            "üí° –ö–æ–º–∞–Ω–¥–∞ /r —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏ –Ω–∞ iOS!"
        )
        logger.info(f"‚úÖ Start response sent successfully to user {user_info}")
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå Error sending start response to user {user_info}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global message_count
    message_count += 1
    
    if not update.message or not update.message.is_topic_message:
        return
    if update.message.from_user and update.message.from_user.is_bot:
        return
        
    topic_id = update.message.message_thread_id
    sender_username = _norm_username(update.message.from_user.username)
    
    logger.info(f"üì® Processing message from @{sender_username} in topic {topic_id}")

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å
    if await _is_chat_admin(update, context):
        logger.info(f"üëë Admin @{sender_username} message allowed in topic {topic_id}")
        pass
    else:
        # –ï—Å–ª–∏ –¥–ª—è –≤–µ—Ç–∫–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        if topic_id in allowed_users_per_topic:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
            if sender_username not in allowed_users_per_topic[topic_id]:
                try:
                    await update.message.delete()
                    logger.info(f"üö´ Deleted message from @{sender_username} in topic {topic_id} (no access)")
                except Exception as e:
                    error_count += 1
                    logger.error(f"‚ùå Error deleting message from @{sender_username} in topic {topic_id}: {e}")
                return
            else:
                logger.info(f"‚úÖ User @{sender_username} message allowed in topic {topic_id}")
        else:
            # –ï—Å–ª–∏ –¥–ª—è –≤–µ—Ç–∫–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –≤—Å–µ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å
            logger.info(f"‚úÖ User @{sender_username} message allowed in topic {topic_id} (no restrictions)")
            pass

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    delay = auto_delete_settings.get(topic_id, 0)
    if delay > 0:
        logger.info(f"‚è∞ Auto-delete scheduled for message in topic {topic_id} in {delay}s")
        asyncio.create_task(delete_after_delay(update, context, delay))

async def delete_after_delay(update: Update, context: ContextTypes.DEFAULT_TYPE, delay: int):
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
    except Exception:
        pass

# Telegram app
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("allow", allow))
application.add_handler(CommandHandler("deny", deny))
application.add_handler(CommandHandler("deny_all", deny_all))
application.add_handler(CommandHandler("allow_all", allow_all))
application.add_handler(CommandHandler("toggle_restricted", toggle_restricted_mode))
application.add_handler(CommandHandler("set_autodelete", set_autodelete))
application.add_handler(CommandHandler("list", list_access))
application.add_handler(CommandHandler("r", reply)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /r
application.add_handler(CommandHandler("topics", list_topics)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /topics
application.add_handler(CommandHandler("set_alias", set_alias)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set_alias
application.add_handler(CommandHandler("remove_alias", remove_alias)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /remove_alias
application.add_handler(CommandHandler("aliases", list_aliases)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /aliases
application.add_handler(CommandHandler("set_cleanup", set_cleanup)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set_cleanup
application.add_handler(CommandHandler("cleanup_now", cleanup_now)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /cleanup_now
application.add_handler(CommandHandler("clear_forwarded", clear_forwarded)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /clear_forwarded
application.add_handler(CommandHandler("show_forwarded", show_forwarded)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /show_forwarded
application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

async def health_check(request):
    """Health check endpoint for Render"""
    stats = get_stats()
    status_text = f"""ü§ñ Bot Status: RUNNING
‚è±Ô∏è Uptime: {stats['uptime']}
üìä Messages processed: {stats['messages_processed']}
‚ùå Errors: {stats['errors']}
üïê Last update: {stats['timestamp']}
‚úÖ Bot is healthy and running!"""
    
    return web.Response(text=status_text, content_type="text/plain")

async def start_web_server():
    """Start web server for Render health checks"""
    app = web.Application()
    app.router.add_get("/", health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", "10000"))
    try:
        site = web.TCPSite(runner, host="0.0.0.0", port=port)
        await site.start()
        print(f"Web server listening on port {port}")
    except OSError as e:
        if e.errno == 10048:  # Port already in use
            print(f"Port {port} is already in use, trying port {port + 1}")
            port += 1
            site = web.TCPSite(runner, host="0.0.0.0", port=port)
            await site.start()
            print(f"Web server listening on port {port}")
        else:
            raise
    return runner

async def keep_alive_ping():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    while True:
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –Ω–∞ —Å–≤–æ–π –∂–µ endpoint
            async with ClientSession() as session:
                async with session.get('http://localhost:10000/') as resp:
                    logger.info(f"üîÑ Keep-alive ping: status {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå Keep-alive error: {e}")

async def cleanup_scheduler():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        current_time = time.time()
        for topic_id, settings in topic_cleanup_settings.items():
            interval_seconds = settings["interval_minutes"] * 60
            last_cleanup = settings.get("last_cleanup", 0)
            
            if current_time - last_cleanup >= interval_seconds:
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–µ
                    asyncio.create_task(cleanup_topic_auto(topic_id))
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏
                    topic_cleanup_settings[topic_id]["last_cleanup"] = current_time
                    logger.info(f"üßπ Scheduled cleanup for topic {topic_id}")
                except Exception as e:
                    logger.error(f"‚ùå Error scheduling cleanup for topic {topic_id}: {e}")

async def cleanup_topic_auto(topic_id: int):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç (—ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å chat_id
        logger.info(f"üßπ Auto cleanup started for topic {topic_id}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏, –Ω–æ –Ω—É–∂–µ–Ω chat_id
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"üßπ Auto cleanup completed for topic {topic_id}")
    except Exception as e:
        logger.error(f"‚ùå Error in auto cleanup for topic {topic_id}: {e}")

async def main_async():
    logger.info("ü§ñ Starting Telegram bot...")
    logger.info(f"üîë Using token: {TOKEN[:20]}...")
    
    web_runner = None
    try:
        # Start web server first
        web_runner = await start_web_server()
        logger.info("üåê Web server started successfully")
        
        # Initialize bot
        await application.initialize()
        logger.info("‚úÖ Application initialized")
        
        await application.start()
        logger.info("‚úÖ Application started")
        
        logger.info("ü§ñ Telegram bot started, starting polling...")
        # Start polling in background
        await application.updater.start_polling()
        logger.info("‚úÖ Polling started successfully")
        
        # Start keep-alive ping
        logger.info("üîÑ Starting keep-alive ping to prevent sleep...")
        asyncio.create_task(keep_alive_ping())
        
        # Start cleanup scheduler
        logger.info("üßπ Starting cleanup scheduler...")
        asyncio.create_task(cleanup_scheduler())
        
        # Keep running with monitoring
        logger.info("üîÑ Bot is now running and monitoring messages...")
        while True:
            await asyncio.sleep(60)  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            stats = get_stats()
            logger.info(f"üìä Bot status: {stats['uptime']} uptime, {stats['messages_processed']} messages, {stats['errors']} errors")
            
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå Critical error in main_async: {e}")
        raise
    finally:
        # Cleanup
        logger.info("üßπ Starting cleanup...")
        if web_runner:
            await web_runner.cleanup()
            logger.info("üåê Web server stopped")
        await application.stop()
        await application.shutdown()
        logger.info("ü§ñ Bot stopped and cleaned up")

if __name__ == "__main__":
    asyncio.run(main_async())
