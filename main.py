
# main.py ‚Äî user's bot logic wrapped for Render Web Service (Free)
import os
import asyncio
import logging
import time
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from aiohttp import web, ClientSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# load_dotenv()
# load_dotenv(dotenv_path="env/config")
TOKEN = "7730139842:AAF8mnKPvwL2I0LYGtFABBBjFZoxx4D77RY"
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π –π–æ–≥–æ –≤ Environment –Ω–∞ Render –∞–±–æ —É .env/env –ª–æ–∫–∞–ª—å–Ω–æ.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
start_time = time.time()
message_count = 0
error_count = 0

def get_uptime():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    uptime = time.time() - start_time
    hours = int(uptime // 3600)
    minutes = int((uptime % 3600) // 60)
    seconds = int(uptime % 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    return {
        "uptime": get_uptime(),
        "messages_processed": message_count,
        "errors": error_count,
        "timestamp": datetime.now().isoformat()
    }

allowed_users_per_topic: dict[int, list[str]] = {}
auto_delete_settings: dict[int, int] = {}

def _get_topic_id_from_context(update: Update, args: list[str]) -> int | None:
    if args:
        try:
            return int(args[-1])
        except ValueError:
            pass
    if update.message and update.message.is_topic_message:
        return update.message.message_thread_id
    return None

async def _is_chat_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç—É"""
    if not update.message:
        return False
    chat = update.message.chat
    user = update.message.from_user
    try:
        member = await context.bot.get_chat_member(chat.id, user.id)
        is_admin = member.status in ("administrator", "creator")
        if is_admin:
            logger.debug(f"üëë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user.username} —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —É —á–∞—Ç—ñ {chat.id}")
        return is_admin
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user.username} —É —á–∞—Ç—ñ {chat.id}: {e}")
        return False

def require_admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await _is_chat_admin(update, context):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
        return await func(update, context)
    return wrapper

def _norm_username(u: str | None) -> str:
    return (u or "").lstrip("@").lower().strip()

@require_admin
async def allow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–∑–≤–æ–ª–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ —Ç–µ–º–∏"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    if not context.args:
        return await update.message.reply_text("üìù –§–æ—Ä–º–∞—Ç: /allow @username [topic_id]. –ú–æ–∂–Ω–∞ –±–µ–∑ topic_id, —è–∫—â–æ –≤–≤–æ–¥–∏—à —É –≥—ñ–ª—Ü—ñ.")
    username = _norm_username(context.args[0])
    if not username:
        return await update.message.reply_text("‚õî –í–∫–∞–∂–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π @username.")
    topic_id = _get_topic_id_from_context(update, context.args[1:])
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")

    users = allowed_users_per_topic.setdefault(topic_id, [])
    if username not in users:
        users.append(username)
        logger.info(f"‚úÖ Admin {user_info} –¥–æ–∑–≤–æ–ª–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username} –≤ —Ç–µ–º—ñ {topic_id}")
        await update.message.reply_text(f"‚úÖ @{username} –º–æ–ª–æ–¥–µ—Ü—å, —Ç–∏ –¥–∑–µ –±–µ—Å—Ç, —Ç—ñ–ª—å–∫–∏ –Ω—ñ—è–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 18+ {topic_id}")
    else:
        logger.info(f"‚ÑπÔ∏è Admin {user_info} –Ω–∞–º–∞–≥–∞–≤—Å—è –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∂–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username} –≤ —Ç–µ–º—ñ {topic_id}")
        await update.message.reply_text(f"‚ÑπÔ∏è @{username} –∞–π –¥–∞ –º–æ–ª–æ–¥–µ—Ü—å, —è–∫ —É —Ç–∞–∫—ñ–π –±—É—Å—ñ –º–æ–Ω–∞ –¥–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞—Ç–∏ {topic_id}")

@require_admin
async def deny(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ —Ç–µ–º–∏"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    if not context.args:
        return await update.message.reply_text("üìù –§–æ—Ä–º–∞—Ç: /deny @username [topic_id]. –ú–æ–∂–Ω–∞ –±–µ–∑ topic_id, —è–∫—â–æ –≤–≤–æ–¥–∏—à —É –≥—ñ–ª—Ü—ñ.")
    username = _norm_username(context.args[0])
    if not username:
        return await update.message.reply_text("‚õî –í–∫–∞–∂–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π @username.")
    topic_id = _get_topic_id_from_context(update, context.args[1:])
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")

    users = allowed_users_per_topic.setdefault(topic_id, [])
    if username in users:
        users.remove(username)
        logger.info(f"üö´ Admin {user_info} –∑–∞–±–æ—Ä–æ–Ω–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username} –≤ —Ç–µ–º—ñ {topic_id}")
        await update.message.reply_text(f"üö´ @{username} –Ω—î –Ω—î, —Ç–æ–±—ñ —Å—é–¥–∏ –Ω–µ –º–æ–Ω–∞ –ø–∏—Å–∞—Ç–∏ {topic_id}")
    else:
        logger.info(f"‚ÑπÔ∏è Admin {user_info} –Ω–∞–º–∞–≥–∞–≤—Å—è –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –≤–∂–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{username} –≤ —Ç–µ–º—ñ {topic_id}")
        await update.message.reply_text(f"‚ÑπÔ∏è @{username} –∞–π—è–π, –Ω–µ –º–æ–Ω–∞, –∑–Ω–∞—á–∏—Ç –Ω–µ –º–æ–Ω–∞ {topic_id}")

@require_admin
async def set_autodelete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    if not context.args:
        return await update.message.reply_text("üìù –§–æ—Ä–º–∞—Ç: /set_autodelete <—Å–µ–∫—É–Ω–¥–∏> [topic_id]")
    try:
        seconds = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚õî <—Å–µ–∫—É–Ω–¥–∏> –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    topic_id = _get_topic_id_from_context(update, context.args[1:])
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")

    auto_delete_settings[topic_id] = max(0, seconds)
    if seconds > 0:
        logger.info(f"‚è∞ Admin {user_info} –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è —Ç–µ–º–∏ {topic_id}: {seconds} —Å–µ–∫.")
        await update.message.reply_text(f"‚ôªÔ∏è –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}: {seconds} —Å–µ–∫.")
    else:
        logger.info(f"‚è∞ Admin {user_info} –≤–∏–º–∫–Ω—É–≤ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è —Ç–µ–º–∏ {topic_id}")
        await update.message.reply_text(f"‚ôªÔ∏è –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}.")

@require_admin
async def list_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—ñ–≤"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    if not allowed_users_per_topic and not auto_delete_settings:
        return await update.message.reply_text("üì≠ –ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–æ—Å—Ç—É–ø—ñ–≤ –∞–±–æ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è.")
    
    lines = ["üìå **–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**"]
    topic_ids = sorted(set(allowed_users_per_topic.keys()) | set(auto_delete_settings.keys()))
    
    for tid in topic_ids:
        users = allowed_users_per_topic.get(tid, None)
        clean = auto_delete_settings.get(tid, 0)
        
        if users is None:
            users_str = "(–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç—å—Å—è)"
        else:
            users_str = ", ".join(f"@{u}" for u in users) if users else "‚Äî (–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤—Å—ñ–º)"
        
        lines.append(f"**‚Äî –¢–µ–º–∞ {tid}:** –¥–æ—Å—Ç—É–ø: {users_str}; –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è: {clean}—Å")
    
    logger.info(f"üìã Admin {user_info} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—ñ–≤")
    await update.message.reply_text("\n".join(lines), parse_mode='Markdown')

@require_admin
async def deny_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ç–µ–º—ñ"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    topic_id = _get_topic_id_from_context(update, context.args)
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ - –∑–Ω–∞—á–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤—Å—ñ–º
    allowed_users_per_topic[topic_id] = []
    logger.info(f"üö´ Admin {user_info} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ç–µ–º—ñ {topic_id}")
    await update.message.reply_text(f"üö´ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ –≥—ñ–ª—Ü—ñ {topic_id}")

@require_admin
async def allow_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ç–µ–º—ñ"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    topic_id = _get_topic_id_from_context(update, context.args)
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ç–µ–º—É - –∑–Ω–∞—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –≤—Å—ñ–º
    if topic_id in allowed_users_per_topic:
        del allowed_users_per_topic[topic_id]
        logger.info(f"‚úÖ Admin {user_info} —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ç–µ–º—ñ {topic_id}")
        await update.message.reply_text(f"‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ –≥—ñ–ª—Ü—ñ {topic_id}")
    else:
        logger.info(f"‚ÑπÔ∏è Admin {user_info} –Ω–∞–º–∞–≥–∞–≤—Å—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —Ç–µ–º—É {topic_id} –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å")
        await update.message.reply_text(f"‚ÑπÔ∏è –ì—ñ–ª–∫–∞ {topic_id} –Ω–µ –º–∞—î –æ–±–º–µ–∂–µ–Ω—å –¥–æ—Å—Ç—É–ø—É")

@require_admin
async def toggle_restricted_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–ª—è —Ç–µ–º–∏"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    topic_id = _get_topic_id_from_context(update, context.args)
    if not topic_id:
        return await update.message.reply_text("–ù–µ –±–∞—á—É ID –≥—ñ–ª–∫–∏. –í–∫–∞–∂–∏ –π–æ–≥–æ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –≥—ñ–ª—Ü—ñ.")
    
    if topic_id in allowed_users_per_topic:
        # –Ø–∫—â–æ —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ - –≤–∏–º–∏–∫–∞—î–º–æ (–≤–∏–¥–∞–ª—è—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è)
        del allowed_users_per_topic[topic_id]
        logger.info(f"üîì Admin {user_info} –≤–∏–º–∫–Ω—É–≤ —Ä–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–ª—è —Ç–µ–º–∏ {topic_id}")
        await update.message.reply_text(f"üîì –†–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}. –í—Å—ñ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏.")
    else:
        # –Ø–∫—â–æ —Ä–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ - —É–≤—ñ–º–∏–∫–∞—î–º–æ (–±–ª–æ–∫—É—î–º–æ –≤—Å—ñ—Ö)
        allowed_users_per_topic[topic_id] = []
        logger.info(f"üîí Admin {user_info} —É–≤—ñ–º–∫–Ω—É–≤ —Ä–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–ª—è —Ç–µ–º–∏ {topic_id}")
        await update.message.reply_text(f"üîí –†–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è –≥—ñ–ª–∫–∏ {topic_id}. –¢—ñ–ª—å–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏.")

@require_admin
async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó —Ç–µ–º–∏"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    if not context.args or len(context.args) < 2:
        return await update.message.reply_text(
            "üìù **–§–æ—Ä–º–∞—Ç:** `/r <topic_id> <—Ç–µ–∫—Å—Ç_–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ>`\n\n"
            "**–ü—Ä–∏–∫–ª–∞–¥:** `/r 123 –ü—Ä–∏–≤—ñ—Ç! –¶–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —ñ–Ω—à–æ—ó —Ç–µ–º–∏.`\n\n"
            "üí° **–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—à–∏—Ö —Ç–µ–º.**\n\n"
            "üá∫üá¶ **–ü—Ä–∞—Ü—é—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!**"
        , parse_mode='Markdown')
    
    try:
        topic_id = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("‚ùå ID —Ç–µ–º–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –ø—ñ—Å–ª—è topic_id)
    reply_text = " ".join(context.args[1:])
    
    if not reply_text.strip():
        return await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!")
    
    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≤–∫–∞–∑–∞–Ω—É —Ç–µ–º—É
        chat_id = update.message.chat.id
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
        sender_name = update.message.from_user.first_name
        sender_username = update.message.from_user.username
        sender_info = f"@{sender_username}" if sender_username else sender_name
        
        formatted_reply = f"üí¨ **–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ {sender_info}:**\n\n{reply_text}"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≤–∫–∞–∑–∞–Ω—É —Ç–µ–º—É
        sent_message = await context.bot.send_message(
            chat_id=chat_id,
            text=formatted_reply,
            message_thread_id=topic_id,
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ –ê–¥–º—ñ–Ω {user_info} –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç–µ–º—É {topic_id}: {reply_text[:50]}...")
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
        await update.message.reply_text(
            f"‚úÖ **–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É —Ç–µ–º—É {topic_id}!**\n\n"
            f"üìù **–¢–µ–∫—Å—Ç:** {reply_text[:100]}{'...' if len(reply_text) > 100 else ''}\n\n"
            f"üá∫üá¶ **–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é!**"
        , parse_mode='Markdown')
        
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ç–µ–º—É {topic_id}: {e}")
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ç–µ–º—É {topic_id}:**\n{str(e)}"
        )

@require_admin
async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–µ–º–∏ —É —á–∞—Ç—ñ"""
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    
    try:
        chat_id = update.message.chat.id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
        chat = await context.bot.get_chat(chat_id)
        
        if not chat.is_forum:
            return await update.message.reply_text("‚ùå –¶–µ–π —á–∞—Ç –Ω–µ —î —Ñ–æ—Ä—É–º–æ–º! –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —É —Ñ–æ—Ä—É–º–∞—Ö –∑ —Ç–µ–º–∞–º–∏.")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–µ–º–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 20)
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ get_forum_topic_icon_stickers –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–µ–º–∏
            # –ù–∞ –∂–∞–ª—å, Telegram API –Ω–µ –Ω–∞–¥–∞—î –ø—Ä—è–º–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ–º
            # –¢–æ–º—É –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
            await update.message.reply_text(
                "üìã **–Ø–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è ID —Ç–µ–º–∏:**\n\n"
                "1Ô∏è‚É£ **–£ —Ç–µ–º—ñ:** ID —Ç–µ–º–∏ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —É –∑–∞–≥–æ–ª–æ–≤–∫—É\n"
                "2Ô∏è‚É£ **–ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:** ID —Ç–µ–º–∏ = message_thread_id\n"
                "3Ô∏è‚É£ **–ö–æ–º–∞–Ω–¥–∞ `/r`:** –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ID —Ç–µ–º–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n\n"
                "üí° **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
                "`/r 123 –ü—Ä–∏–≤—ñ—Ç! –¶–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —ñ–Ω—à–æ—ó —Ç–µ–º–∏.`\n\n"
                "üîç **–©–æ–± –∑–Ω–∞–π—Ç–∏ ID —Ç–µ–º–∏:**\n"
                "‚Ä¢ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–µ–º—É\n"
                "‚Ä¢ ID –±—É–¥–µ —É –∑–∞–≥–æ–ª–æ–≤–∫—É –∞–±–æ URL\n"
                "‚Ä¢ –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–º–∏\n\n"
                "üá∫üá¶ **–ü—Ä–∞—Ü—é—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!**"
            , parse_mode='Markdown')
            
            logger.info(f"üìã –ê–¥–º—ñ–Ω {user_info} –∑–∞–ø–∏—Ç–∞–≤ —Å–ø–∏—Å–æ–∫ —Ç–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–º: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ç–µ–º.")
            
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ list_topics: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global message_count
    message_count += 1
    
    user_info = f"{update.message.from_user.username or update.message.from_user.first_name}"
    logger.info(f"üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_info}")
    
    try:
        await update.message.reply_text(
            "ü§ñ **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!**\n\n"
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤):**\n"
            "‚Ä¢ `/allow @username [topic_id]` - –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n"
            "‚Ä¢ `/deny @username [topic_id]` - –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\n"
            "‚Ä¢ `/deny_all [topic_id]` - –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –í–°–Ü–• –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "‚Ä¢ `/allow_all [topic_id]` - —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –í–°–Ü–• –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "‚Ä¢ `/toggle_restricted [topic_id]` - —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –æ–±–º–µ–∂–µ–Ω—å\n"
            "‚Ä¢ `/set_autodelete <—Å–µ–∫—É–Ω–¥–∏> [topic_id]` - –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è\n"
            "‚Ä¢ `/list` - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
            "‚Ä¢ `/topics` - —è–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è ID —Ç–µ–º\n"
            "‚Ä¢ `/r <topic_id> <—Ç–µ–∫—Å—Ç>` - –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—à–æ—ó —Ç–µ–º–∏\n\n"
            "‚ÑπÔ∏è **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–æ–±–æ—Ç–∏:** —è–∫—â–æ –¥–ª—è —Ç–µ–º–∏ —î –∑–∞–ø–∏—Å —É —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø—ñ–≤ ‚Äî –ø–∏—Å–∞—Ç–∏ –º–æ–∂—É—Ç—å —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É. "
            "–ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ = –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤—Å—ñ–º.\n\n"
            "üí° **–ö–æ–º–∞–Ω–¥–∞ `/r` –≤–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º—É –∑ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º—ñ–∂ —Ç–µ–º–∞–º–∏ –Ω–∞ iOS!**\n\n"
            "üá∫üá¶ **–ë–æ—Ç –ø—Ä–∞—Ü—é—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!**"
        , parse_mode='Markdown')
        logger.info(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ /start –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_info}")
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ /start –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_info}: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global message_count
    message_count += 1
    
    if not update.message or not update.message.is_topic_message:
        return
    if update.message.from_user and update.message.from_user.is_bot:
        return
        
    topic_id = update.message.message_thread_id
    sender_username = _norm_username(update.message.from_user.username)
    
    logger.info(f"üì® –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{sender_username} —É —Ç–µ–º—ñ {topic_id}")

    # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏
    if await _is_chat_admin(update, context):
        logger.info(f"üëë –ê–¥–º—ñ–Ω @{sender_username} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–æ —É —Ç–µ–º—ñ {topic_id}")
        pass
    else:
        # –Ø–∫—â–æ –¥–ª—è —Ç–µ–º–∏ —î –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
        if topic_id in allowed_users_per_topic:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
            if sender_username not in allowed_users_per_topic[topic_id]:
                try:
                    await update.message.delete()
                    logger.info(f"üö´ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{sender_username} —É —Ç–µ–º—ñ {topic_id} (–Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É)")
                except Exception as e:
                    error_count += 1
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{sender_username} —É —Ç–µ–º—ñ {topic_id}: {e}")
                return
            else:
                logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{sender_username} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–æ —É —Ç–µ–º—ñ {topic_id}")
        else:
            # –Ø–∫—â–æ –¥–ª—è —Ç–µ–º–∏ –Ω–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å - –≤—Å—ñ –º–æ–∂—É—Ç—å –ø–∏—Å–∞—Ç–∏
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{sender_username} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–∑–≤–æ–ª–µ–Ω–æ —É —Ç–µ–º—ñ {topic_id} (–Ω–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å)")
            pass

    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    delay = auto_delete_settings.get(topic_id, 0)
    if delay > 0:
        logger.info(f"‚è∞ –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç–µ–º—ñ {topic_id} —á–µ—Ä–µ–∑ {delay}—Å")
        asyncio.create_task(delete_after_delay(update, context, delay))

async def delete_after_delay(update: Update, context: ContextTypes.DEFAULT_TYPE, delay: int):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å"""
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
        logger.info(f"üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {update.message.message_id} —É —á–∞—Ç—ñ {update.message.chat_id} —á–µ—Ä–µ–∑ {delay}—Å")
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {update.message.message_id}: {e}")

# Telegram app
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("allow", allow))
application.add_handler(CommandHandler("deny", deny))
application.add_handler(CommandHandler("deny_all", deny_all))
application.add_handler(CommandHandler("allow_all", allow_all))
application.add_handler(CommandHandler("toggle_restricted", toggle_restricted_mode))
application.add_handler(CommandHandler("set_autodelete", set_autodelete))
application.add_handler(CommandHandler("list", list_access))
application.add_handler(CommandHandler("r", reply)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /r
application.add_handler(CommandHandler("topics", list_topics)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /topics
application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

async def health_check(request):
    """Endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è Render"""
    stats = get_stats()
    status_text = f"""ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ü–†–ê–¶–Æ–Ñ**
‚è±Ô∏è **–ß–∞—Å —Ä–æ–±–æ—Ç–∏:** {stats['uptime']}
üìä **–û–±—Ä–æ–±–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:** {stats['messages_processed']}
‚ùå **–ü–æ–º–∏–ª–æ–∫:** {stats['errors']}
üïê **–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:** {stats['timestamp']}
‚úÖ **–ë–æ—Ç –∑–¥–æ—Ä–æ–≤–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î!**
üá∫üá¶ **–ú–æ–≤–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞**"""
    
    return web.Response(text=status_text, content_type="text/plain")

async def start_web_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤'—è Render"""
    app = web.Application()
    app.router.add_get("/", health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", "10000"))
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É—î –ø–æ—Ä—Ç {port}")
    return runner

async def keep_alive_ping():
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î ping –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω —â–æ–± —Å–µ—Ä–≤—ñ—Å –Ω–µ –∑–∞—Å–∏–Ω–∞–≤"""
    while True:
        await asyncio.sleep(600)  # 10 —Ö–≤–∏–ª–∏–Ω
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ping –Ω–∞ —Å–≤—ñ–π –∂–µ endpoint
            async with ClientSession() as session:
                async with session.get('http://localhost:10000/') as resp:
                    logger.info(f"üîÑ Keep-alive ping: —Å—Ç–∞—Ç—É—Å {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ keep-alive: {e}")

async def main_async():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–∫–µ–Ω: {TOKEN[:20]}...")
    
    web_runner = None
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        web_runner = await start_web_server()
        logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞
        await application.initialize()
        logger.info("‚úÖ –î–æ–¥–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        await application.start()
        logger.info("‚úÖ –î–æ–¥–∞—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ")
        
        logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π, –ø–æ—á–∏–Ω–∞—î–º–æ polling...")
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
        await application.updater.start_polling()
        logger.info("‚úÖ Polling —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ keep-alive ping
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ keep-alive ping –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å–Ω—É...")
        asyncio.create_task(keep_alive_ping())
        
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º
        logger.info("üîÑ –ë–æ—Ç —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        while True:
            await asyncio.sleep(60)  # –õ–æ–≥—É—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            stats = get_stats()
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {stats['uptime']} —á–∞—Å —Ä–æ–±–æ—Ç–∏, {stats['messages_processed']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, {stats['errors']} –ø–æ–º–∏–ª–æ–∫")
            
    except Exception as e:
        error_count += 1
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main_async: {e}")
        raise
    finally:
        # –û—á–∏—â–µ–Ω–Ω—è
        logger.info("üßπ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è...")
        if web_runner:
            await web_runner.cleanup()
            logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ")
        await application.stop()
        await application.shutdown()
        logger.info("ü§ñ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ —Ç–∞ –æ—á–∏—â–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main_async())
